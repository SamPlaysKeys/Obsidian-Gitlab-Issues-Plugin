{"code":"import { __awaiter } from \"tslib\";\nimport { Plugin, PluginSettingTab, Setting, Notice } from 'obsidian';\nconst DEFAULT_SETTINGS = {\n    token: '',\n    projectId: '',\n    defaultLabels: ''\n};\nexport default class GitLabPlugin extends Plugin {\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loadSettings();\n            // This adds a settings tab so the user can configure various aspects of the plugin\n            this.addSettingTab(new SettingsTab(this.app, this));\n            // Command to create GitLab issue from active markdown file\n            this.addCommand({\n                id: 'create-gitlab-issue',\n                name: 'Create GitLab issue from active file',\n                callback: () => {\n                    this.createIssueFromActiveFile();\n                }\n            });\n            // This adds a simple command that can be triggered anywhere\n            this.addCommand({\n                id: 'open-gitlab-sample-modal',\n                name: 'Open GitLab sample modal',\n                callback: () => {\n                    console.log('GitLab plugin command executed!');\n                }\n            });\n        });\n    }\n    onunload() {\n        console.log('Unloading GitLab plugin');\n    }\n    loadSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());\n        });\n    }\n    saveSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.saveData(this.settings);\n        });\n    }\n    createIssueFromActiveFile() {\n        try {\n            // Validate settings before proceeding\n            if (!this.validateSettings()) {\n                return;\n            }\n            // Get the active markdown file\n            const activeFile = this.app.workspace.getActiveFile();\n            if (!activeFile) {\n                new Notice('No active file found. Please open a markdown file first.');\n                console.error('No active file found');\n                return;\n            }\n            if (!activeFile.path.endsWith('.md')) {\n                new Notice('Active file is not a markdown file. Please select a .md file.');\n                console.error('Active file is not a markdown file');\n                return;\n            }\n            console.log('Creating GitLab issue from file:', activeFile.path);\n            new Notice('Creating GitLab issue...');\n            this.triggerIssueCreation(activeFile);\n        }\n        catch (error) {\n            console.error('Error in createIssueFromActiveFile:', error);\n            new Notice('An unexpected error occurred while preparing to create the GitLab issue.');\n        }\n    }\n    triggerIssueCreation(file) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Read file content and title\n                const content = yield this.app.vault.read(file);\n                const title = file.basename; // Use filename without extension as title\n                if (!title.trim()) {\n                    new Notice('File has no valid title. Cannot create GitLab issue.');\n                    return;\n                }\n                // Create GitLab issue\n                const issueUrl = yield this.createGitLabIssue(title, content);\n                if (issueUrl) {\n                    try {\n                        // Update note frontmatter with GitLab issue URL\n                        yield this.updateNoteFrontmatter(file, issueUrl);\n                        new Notice(`GitLab issue created successfully!\\nURL: ${issueUrl}`, 8000);\n                        console.log('Issue created:', issueUrl);\n                    }\n                    catch (frontmatterError) {\n                        console.error('Error updating frontmatter:', frontmatterError);\n                        new Notice(`GitLab issue created successfully!\\nURL: ${issueUrl}\\n\\nWarning: Could not update file frontmatter.`, 10000);\n                    }\n                }\n                else {\n                    new Notice('Failed to create GitLab issue. Please check your settings and try again.');\n                }\n            }\n            catch (error) {\n                console.error('Error creating GitLab issue:', error);\n                if (error instanceof Error) {\n                    new Notice(`Error creating GitLab issue: ${error.message}`);\n                }\n                else {\n                    new Notice('An unexpected error occurred while creating the GitLab issue.');\n                }\n            }\n        });\n    }\n    /**\n     * Creates a GitLab issue from note title and content\n     * @param title - The note title to use as issue title\n     * @param content - The markdown content to use as issue description\n     * @returns Promise<string | null> - The web_url of the created issue or null if failed\n     */\n    createGitLabIssue(title, content) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Validate required settings - this should already be done, but double-check\n                if (!this.settings.token) {\n                    console.error('GitLab token not configured');\n                    new Notice('Please configure your GitLab Personal Access Token in plugin settings');\n                    return null;\n                }\n                if (!this.settings.projectId) {\n                    console.error('GitLab project ID not configured');\n                    new Notice('Please configure your GitLab Project ID in plugin settings');\n                    return null;\n                }\n                // Minimal transformation of markdown content for issue description\n                // Remove front matter and clean up basic markdown elements\n                const transformedContent = this.transformMarkdownForGitLab(content);\n                // Prepare issue data\n                const issueData = {\n                    title: title,\n                    description: transformedContent,\n                    labels: this.settings.defaultLabels ? this.settings.defaultLabels.split(',').map(l => l.trim()).filter(l => l) : []\n                };\n                console.log('Sending GitLab API request with data:', Object.assign(Object.assign({}, issueData), { description: transformedContent.substring(0, 100) + '...' }));\n                try {\n                    // Send POST request to GitLab API\n                    const response = yield fetch(`https://gitlab.com/api/v4/projects/${this.settings.projectId}/issues`, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Private-Token': this.settings.token\n                        },\n                        body: JSON.stringify(issueData)\n                    });\n                    if (!response.ok) {\n                        let errorMessage = `GitLab API request failed with status ${response.status}`;\n                        try {\n                            const errorData = yield response.json();\n                            if (errorData.message) {\n                                errorMessage += `: ${errorData.message}`;\n                            }\n                        }\n                        catch (_a) {\n                            // If JSON parsing fails, use text\n                            const errorText = yield response.text();\n                            if (errorText) {\n                                errorMessage += `: ${errorText}`;\n                            }\n                        }\n                        console.error('GitLab API error:', response.status, errorMessage);\n                        // Provide specific error feedback based on status code\n                        if (response.status === 401) {\n                            new Notice('Authentication failed. Please check your GitLab Personal Access Token.');\n                        }\n                        else if (response.status === 403) {\n                            new Notice('Access denied. Please check your token permissions and project access.');\n                        }\n                        else if (response.status === 404) {\n                            new Notice('Project not found. Please check your Project ID.');\n                        }\n                        else if (response.status >= 500) {\n                            new Notice('GitLab server error. Please try again later.');\n                        }\n                        else {\n                            new Notice(`GitLab API error: ${errorMessage}`);\n                        }\n                        return null;\n                    }\n                    // Parse JSON response and extract web_url\n                    const responseData = yield response.json();\n                    console.log('GitLab API response:', responseData);\n                    // Validate response data\n                    if (!responseData.web_url) {\n                        console.error('Invalid GitLab API response: missing web_url');\n                        new Notice('Invalid response from GitLab API. Issue may have been created but URL is missing.');\n                        return null;\n                    }\n                    // Return the web_url from the response\n                    return responseData.web_url;\n                }\n                catch (networkError) {\n                    console.error('Network error calling GitLab API:', networkError);\n                    if (networkError instanceof TypeError && networkError.message.includes('fetch')) {\n                        new Notice('Network error: Unable to connect to GitLab. Please check your internet connection.');\n                    }\n                    else {\n                        new Notice(`Network error: ${networkError instanceof Error ? networkError.message : 'Unknown error'}`);\n                    }\n                    return null;\n                }\n            }\n            catch (error) {\n                console.error('Unexpected error in createGitLabIssue:', error);\n                new Notice('An unexpected error occurred while creating the GitLab issue.');\n                return null;\n            }\n        });\n    }\n    /**\n     * Performs minimal transformation of markdown content for GitLab issue description\n     * @param content - Raw markdown content from the note\n     * @returns Transformed content suitable for GitLab issues\n     */\n    transformMarkdownForGitLab(content) {\n        // Remove YAML front matter if present\n        let transformed = content.replace(/^---[\\s\\S]*?---\\n?/, '');\n        // Remove Obsidian-specific wikilinks and convert to regular text\n        transformed = transformed.replace(/\\[\\[([^\\]]+)\\]\\]/g, '$1');\n        // Convert Obsidian tags to GitLab mentions (optional transformation)\n        transformed = transformed.replace(/#([a-zA-Z0-9_-]+)/g, '`#$1`');\n        // Trim extra whitespace\n        transformed = transformed.trim();\n        // If content is empty after transformation, provide a default message\n        if (!transformed) {\n            transformed = 'Created from Obsidian note (content was empty)';\n        }\n        return transformed;\n    }\n    /**\n     * Updates the frontmatter of a note with the GitLab issue URL\n     * @param file - The TFile to update\n     * @param issueUrl - The GitLab issue web URL to add to frontmatter\n     */\n    updateNoteFrontmatter(file, issueUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (!file || !issueUrl) {\n                    throw new Error('Invalid file or issue URL provided');\n                }\n                // Read the current file content\n                const fileContent = yield this.app.vault.read(file);\n                if (typeof fileContent !== 'string') {\n                    throw new Error('Unable to read file content');\n                }\n                // Use MetadataCache to check if file already has frontmatter\n                const fileCache = this.app.metadataCache.getFileCache(file);\n                const hasFrontmatter = (fileCache === null || fileCache === void 0 ? void 0 : fileCache.frontmatter) !== undefined;\n                let updatedContent;\n                try {\n                    if (hasFrontmatter) {\n                        // File has existing frontmatter, update it\n                        updatedContent = this.addToExistingFrontmatter(fileContent, issueUrl);\n                    }\n                    else {\n                        // File has no frontmatter, create new frontmatter\n                        updatedContent = this.createNewFrontmatter(fileContent, issueUrl);\n                    }\n                }\n                catch (frontmatterError) {\n                    console.error('Error processing frontmatter:', frontmatterError);\n                    throw new Error('Failed to process file frontmatter');\n                }\n                if (!updatedContent || updatedContent === fileContent) {\n                    throw new Error('No changes made to file content');\n                }\n                // Write the updated content back to the file\n                yield this.app.vault.modify(file, updatedContent);\n                console.log(`Updated frontmatter for ${file.path} with GitLab issue URL`);\n            }\n            catch (error) {\n                console.error('Error updating note frontmatter:', error);\n                const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n                throw new Error(`Failed to update note frontmatter: ${errorMessage}`);\n            }\n        });\n    }\n    /**\n     * Adds GitLab issue URL to existing frontmatter\n     * @param content - Current file content with existing frontmatter\n     * @param issueUrl - GitLab issue URL to add\n     * @returns Updated content with GitLab URL in frontmatter\n     */\n    addToExistingFrontmatter(content, issueUrl) {\n        // Match existing frontmatter block\n        const frontmatterMatch = content.match(/^(---\\n[\\s\\S]*?)\\n---/);\n        if (!frontmatterMatch) {\n            // Fallback: create new frontmatter if regex fails\n            return this.createNewFrontmatter(content, issueUrl);\n        }\n        const existingFrontmatter = frontmatterMatch[1];\n        const afterFrontmatter = content.slice(frontmatterMatch[0].length);\n        // Check if gitlab_issue_url already exists and update it, otherwise add it\n        let updatedFrontmatter;\n        if (existingFrontmatter.includes('gitlab_issue_url:')) {\n            // Replace existing gitlab_issue_url\n            updatedFrontmatter = existingFrontmatter.replace(/gitlab_issue_url:.*$/m, `gitlab_issue_url: \"${issueUrl}\"`);\n        }\n        else {\n            // Add new gitlab_issue_url property\n            updatedFrontmatter = existingFrontmatter + `\\ngitlab_issue_url: \"${issueUrl}\"`;\n        }\n        return updatedFrontmatter + '\\n---' + afterFrontmatter;\n    }\n    /**\n     * Creates new frontmatter with GitLab issue URL\n     * @param content - Current file content without frontmatter\n     * @param issueUrl - GitLab issue URL to add\n     * @returns Content with new frontmatter containing GitLab URL\n     */\n    createNewFrontmatter(content, issueUrl) {\n        const newFrontmatter = `---\\ngitlab_issue_url: \"${issueUrl}\"\\n---\\n`;\n        return newFrontmatter + content;\n    }\n    /**\n     * Validates plugin settings and shows appropriate warnings\n     * @returns boolean - true if settings are valid, false otherwise\n     */\n    validateSettings() {\n        const issues = [];\n        if (!this.settings.token || this.settings.token.trim() === '') {\n            issues.push('GitLab Personal Access Token is required');\n        }\n        if (!this.settings.projectId || this.settings.projectId.trim() === '') {\n            issues.push('GitLab Project ID is required');\n        }\n        // Validate project ID format (should be numeric or namespace/project format)\n        if (this.settings.projectId && this.settings.projectId.trim() !== '') {\n            const projectId = this.settings.projectId.trim();\n            // Allow numeric IDs or namespace/project format\n            if (!/^\\d+$/.test(projectId) && !/^[a-zA-Z0-9_.-]+\\/[a-zA-Z0-9_.-]+$/.test(projectId)) {\n                issues.push('Project ID should be either a numeric ID or in \"namespace/project\" format');\n            }\n        }\n        // Validate token format (basic check)\n        if (this.settings.token && this.settings.token.trim() !== '') {\n            const token = this.settings.token.trim();\n            // GitLab tokens are typically 20-26 characters and alphanumeric with possible dashes/underscores\n            if (token.length < 10 || !/^[a-zA-Z0-9_-]+$/.test(token)) {\n                issues.push('Personal Access Token format appears invalid');\n            }\n        }\n        if (issues.length > 0) {\n            const warningMessage = 'Plugin configuration issues:\\n\\n' + issues.map(issue => `• ${issue}`).join('\\n') + '\\n\\nPlease update your settings before creating issues.';\n            new Notice(warningMessage, 10000);\n            console.warn('GitLab plugin configuration issues:', issues);\n            return false;\n        }\n        return true;\n    }\n}\nclass SettingsTab extends PluginSettingTab {\n    constructor(app, plugin) {\n        super(app, plugin);\n        this.plugin = plugin;\n    }\n    display() {\n        const { containerEl } = this;\n        containerEl.empty();\n        containerEl.createEl('h2', { text: 'GitLab Plugin Settings' });\n        // Add validation status indicator\n        const statusEl = containerEl.createEl('div', { cls: 'gitlab-plugin-status' });\n        this.updateValidationStatus(statusEl);\n        new Setting(containerEl)\n            .setName('Personal Access Token')\n            .setDesc('Your GitLab personal access token (required). Create one at GitLab.com → User Settings → Access Tokens')\n            .addText(text => {\n            text.setPlaceholder('glpat-xxxxxxxxxxxxxxxxxxxx')\n                .setValue(this.plugin.settings.token)\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    this.plugin.settings.token = value;\n                    yield this.plugin.saveSettings();\n                    this.updateValidationStatus(statusEl);\n                }\n                catch (error) {\n                    console.error('Error saving token:', error);\n                    new Notice('Failed to save Personal Access Token');\n                }\n            }));\n            // Make it a password field for security\n            text.inputEl.type = 'password';\n        });\n        new Setting(containerEl)\n            .setName('Project ID')\n            .setDesc('The GitLab project ID (required). Can be numeric (e.g., \"12345\") or namespace/project format (e.g., \"mygroup/myproject\")')\n            .addText(text => text\n            .setPlaceholder('12345 or mygroup/myproject')\n            .setValue(this.plugin.settings.projectId)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.plugin.settings.projectId = value;\n                yield this.plugin.saveSettings();\n                this.updateValidationStatus(statusEl);\n            }\n            catch (error) {\n                console.error('Error saving project ID:', error);\n                new Notice('Failed to save Project ID');\n            }\n        })));\n        new Setting(containerEl)\n            .setName('Default Labels')\n            .setDesc('Comma-separated list of default labels for issues (optional)')\n            .addText(text => text\n            .setPlaceholder('bug, enhancement, documentation')\n            .setValue(this.plugin.settings.defaultLabels)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.plugin.settings.defaultLabels = value;\n                yield this.plugin.saveSettings();\n            }\n            catch (error) {\n                console.error('Error saving default labels:', error);\n                new Notice('Failed to save Default Labels');\n            }\n        })));\n        // Add help section\n        const helpEl = containerEl.createEl('div', { cls: 'gitlab-plugin-help' });\n        helpEl.createEl('h3', { text: 'Setup Instructions' });\n        const helpList = helpEl.createEl('ol');\n        helpList.createEl('li', { text: 'Go to GitLab.com → User Settings → Access Tokens' });\n        helpList.createEl('li', { text: 'Create a new token with \"api\" scope' });\n        helpList.createEl('li', { text: 'Copy the token and paste it above' });\n        helpList.createEl('li', { text: 'Find your project ID in Project Settings → General' });\n    }\n    updateValidationStatus(statusEl) {\n        statusEl.empty();\n        const hasToken = this.plugin.settings.token && this.plugin.settings.token.trim() !== '';\n        const hasProjectId = this.plugin.settings.projectId && this.plugin.settings.projectId.trim() !== '';\n        if (hasToken && hasProjectId) {\n            statusEl.createEl('div', {\n                text: '✅ Configuration appears valid',\n                cls: 'gitlab-status-success'\n            });\n        }\n        else {\n            const missing = [];\n            if (!hasToken)\n                missing.push('Personal Access Token');\n            if (!hasProjectId)\n                missing.push('Project ID');\n            statusEl.createEl('div', {\n                text: `⚠️ Missing required fields: ${missing.join(', ')}`,\n                cls: 'gitlab-status-warning'\n            });\n        }\n    }\n}\n//# sourceMappingURL=main.js.map","references":["/Users/sfadmin/Dev/Obsidian-Gitlab-Plugin/node_modules/obsidian/obsidian.d.ts"],"map":"{\"version\":3,\"file\":\"main.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../main.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"/Users/sfadmin/Dev/Obsidian-Gitlab-Plugin/node_modules/.cache/rollup-plugin-typescript2/placeholder/main.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"main.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../main.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAO,MAAM,EAA4C,MAAM,UAAU,CAAC;AAEjF,UAAU,cAAc;IACvB,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;CACtB;AAQD,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,MAAM;IAC/C,QAAQ,EAAG,cAAc,CAAC;IAEpB,MAAM;IAyBZ,QAAQ;IAIF,YAAY;IAIZ,YAAY;IAIlB,OAAO,CAAC,yBAAyB;YAgCnB,oBAAoB;IAqClC;;;;;OAKG;YACW,iBAAiB;IAwG/B;;;;OAIG;IACH,OAAO,CAAC,0BAA0B;IAqBlC;;;;OAIG;YACW,qBAAqB;IA+CnC;;;;;OAKG;IACH,OAAO,CAAC,wBAAwB;IA4BhC;;;;;OAKG;IACH,OAAO,CAAC,oBAAoB;IAK5B;;;OAGG;IACH,OAAO,CAAC,gBAAgB;CAsCxB\"}"},"dts":{"name":"/Users/sfadmin/Dev/Obsidian-Gitlab-Plugin/node_modules/.cache/rollup-plugin-typescript2/placeholder/main.d.ts","writeByteOrderMark":false,"text":"import { Plugin } from 'obsidian';\ninterface GitLabSettings {\n    token: string;\n    projectId: string;\n    defaultLabels: string;\n}\nexport default class GitLabPlugin extends Plugin {\n    settings: GitLabSettings;\n    onload(): Promise<void>;\n    onunload(): void;\n    loadSettings(): Promise<void>;\n    saveSettings(): Promise<void>;\n    private createIssueFromActiveFile;\n    private triggerIssueCreation;\n    /**\n     * Creates a GitLab issue from note title and content\n     * @param title - The note title to use as issue title\n     * @param content - The markdown content to use as issue description\n     * @returns Promise<string | null> - The web_url of the created issue or null if failed\n     */\n    private createGitLabIssue;\n    /**\n     * Performs minimal transformation of markdown content for GitLab issue description\n     * @param content - Raw markdown content from the note\n     * @returns Transformed content suitable for GitLab issues\n     */\n    private transformMarkdownForGitLab;\n    /**\n     * Updates the frontmatter of a note with the GitLab issue URL\n     * @param file - The TFile to update\n     * @param issueUrl - The GitLab issue web URL to add to frontmatter\n     */\n    private updateNoteFrontmatter;\n    /**\n     * Adds GitLab issue URL to existing frontmatter\n     * @param content - Current file content with existing frontmatter\n     * @param issueUrl - GitLab issue URL to add\n     * @returns Updated content with GitLab URL in frontmatter\n     */\n    private addToExistingFrontmatter;\n    /**\n     * Creates new frontmatter with GitLab issue URL\n     * @param content - Current file content without frontmatter\n     * @param issueUrl - GitLab issue URL to add\n     * @returns Content with new frontmatter containing GitLab URL\n     */\n    private createNewFrontmatter;\n    /**\n     * Validates plugin settings and shows appropriate warnings\n     * @returns boolean - true if settings are valid, false otherwise\n     */\n    private validateSettings;\n}\nexport {};\n//# sourceMappingURL=main.d.ts.map"}}
